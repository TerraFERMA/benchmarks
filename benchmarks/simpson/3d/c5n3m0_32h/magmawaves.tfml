<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitCube">
        <number_cells>
          <integer_value shape="3" dim1="3" rank="1">16 16 16</integer_value>
        </number_cells>
        <cell>
          <string_value>tetrahedron</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">magmawaves</string_value>
    </output_base_name>
    <visualization>
      <element name="P2">
        <family>
          <string_value>CG</string_value>
        </family>
        <degree>
          <integer_value rank="0">2</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods>
      <visualization_period>
        <real_value rank="0">0.05</real_value>
      </visualization_period>
      <statistics_period>
        <real_value rank="0">.025</real_value>
      </statistics_period>
      <detectors_period>
        <real_value rank="0">0.025</real_value>
      </detectors_period>
    </dump_periods>
    <detectors/>
    <checkpointing>
      <checkpoint_period>
        <real_value rank="0">.05</real_value>
      </checkpoint_period>
    </checkpointing>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <finish_time>
      <real_value rank="0">0.5</real_value>
    </finish_time>
    <timestep>
      <coefficient name="Timestep">
        <ufl_symbol>
          <string_value lines="1">dt</string_value>
        </ufl_symbol>
        <type name="Constant">
          <rank name="Scalar" rank="0">
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">0.</real_value>
              </constant>
            </value>
          </rank>
        </type>
      </coefficient>
      <adaptive>
        <constraint name="Courant">
          <system name="magma"/>
          <coefficient name="CourantNumber"/>
          <requested_maximum_value>
            <real_value rank="0">0.35355339059327373</real_value>
          </requested_maximum_value>
        </constraint>
        <adapt_period>
          <real_value rank="0">2.</real_value>
        </adapt_period>
        <increase_tolerance>
          <real_value rank="0">1.1</real_value>
        </increase_tolerance>
      </adaptive>
    </timestep>
  </timestepping>
  <global_parameters>
    <ufl>
      <string_value lines="20" type="code" language="python"># Global parameters for porosity pressure residual 

# h_on_delta: height of domain in compaction lengths
h_on_delta = 32.
hsquared = h_on_delta**2

# permeability
n = 3
K = f_i**n

#inverse bulk viscosity function (assume constant bulk viscosity)
#m = 0
#Xi = hsquared*f_i**m
Xi = hsquared

# facet normal for forcing term
fn = FacetNormal(f_e.cell())</string_value>
    </ufl>
  </global_parameters>
  <system name="magma">
    <mesh name="Mesh"/>
    <ufl_symbol>
      <string_value lines="1">us</string_value>
    </ufl_symbol>
    <field name="Pressure">
      <ufl_symbol>
        <string_value lines="1">p</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
          <boundary_condition name="Top">
            <boundary_ids>
              <integer_value shape="1" rank="1">4</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0.</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics>
          <functional name="IntegralPressure">
            <string_value lines="20" type="code" language="python">int = p*dx</string_value>
            <ufl_symbol>
              <string_value lines="1">int</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          </functional>
        </include_in_statistics>
        <include_in_detectors/>
      </diagnostics>
    </field>
    <field name="Porosity">
      <ufl_symbol>
        <string_value lines="1">f</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python"># Initialize to single solitary wave profile 
# using PySolwave routines ... need to set python path appropriately 
# This header will act as a global header to all subsequent def val instances
# (with great power comes great responsibility)

from solitarywave import *
from numpy import array
from math import sqrt

c = 5.                                 #Wave speed
n = 3                                  # permeability exponent
m = 0                                 # bulk-viscosity exponent
d = 3                                # dimension
N = 400                              # number of collocation points
swave = SolitaryWave(c,n,m,d,N)

# sort out index depending on d
if d == 1:
  index = [2]
elif d == 2:
  index = [0,2]  
else: 
  index = range(0,3)# sort out index depending on d

# location of solitary wave maximum
x0 = array([.5, .5, .5]) 

# size of the domain in compaction lengths
h_on_delta = 32.
r_max = 25.

def val(x):
  global x0, h_on_delta, swave, sqrt, array, r_max, index
 
  dx = array(x)[index] - x0[index]  
  r = h_on_delta*sqrt(sum(dx*dx))
  if r &lt;= r_max:
     return swave.interp(array([r]))	
  else:
     return 1.0</string_value>
            </python>
          </initial_condition>
          <boundary_condition name="top">
            <boundary_ids>
              <integer_value shape="1" rank="1">4</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">1.</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics>
          <functional name="Integral">
            <string_value lines="20" type="code" language="python">int = f*dx</string_value>
            <ufl_symbol>
              <string_value lines="1">int</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          </functional>
        </include_in_statistics>
      </diagnostics>
    </field>
    <coefficient name="W">
      <ufl_symbol>
        <string_value lines="1">W</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Vector" rank="1">
          <value type="value" name="WholeMesh">
            <constant name="dim">
              <real_value shape="3" dim1="dim" rank="1">0. 0. -5.</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="phi_analytic">
      <ufl_symbol>
        <string_value lines="1">phi</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python"># Global header for this routine in the initial condition

# new parameter velocity of wave relative to background advection field 
dW0 = 0.

def val(x,t):
  global x0, h_on_delta, swave, sqrt, array, r_max, index,dW0
  x0t = x0 + array([0., 0., 1.])*dW0*t
  
  dx = array(x)[index] - x0t[index]  
  r = h_on_delta*sqrt(sum(dx*dx))
  if r &lt;= r_max: 
     return swave.interp(array([r]))	
  else:
     return 1.0</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="CourantNumber">
      <ufl_symbol>
        <string_value lines="1">ac</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P0">
            <family>
              <string_value>DG</string_value>
            </family>
            <degree>
              <integer_value rank="0">0</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <cpp rank="0">
              <members>
                <string_value lines="20" type="code" language="cpp">GenericFunction_ptr v;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">v = bucket()-&gt;fetch_system("magma")-&gt;fetch_coeff("W")-&gt;genericfunction_ptr(time());</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">const dolfin::Cell dcell((*system()-&gt;mesh()), cell.index);
dolfin::Array&lt;double&gt; v_values(3);
v-&gt;eval(v_values, x, cell);
double v_max = std::max(std::abs(v_values[0]),std::abs(v_values[1]));
v_max = std::max(v_max,std::abs(v_values[2]));
values[0] = (v_max*bucket()-&gt;timestep())/dcell.diameter();</string_value>
              </eval>
            </cpp>
          </value>
        </rank>
      </type>
      <diagnostics>
        <include_in_statistics>
          <functional name="Integral">
            <string_value lines="20" type="code" language="python">int = ac*dx</string_value>
            <ufl_symbol>
              <string_value lines="1">int</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          </functional>
        </include_in_statistics>
      </diagnostics>
    </coefficient>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python"># other parameters in global ufl
rp = (K*inner(grad(p_t),grad(p_i)) + p_t*Xi*p_i - K*p_t.dx(2))*dx + p_t*K*fn[2]*ds(3)
rf = f_t*(f_i - f_n  + dt*inner(W,grad(f_i)) - 0.5*dt*(Xi*p_i + Xi*p_n))*dx 

r = rp + rf</string_value>
          <ufl_symbol>
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">a = derivative(r, us_i, us_a)</string_value>
          <ufl_symbol>
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <quadrature_degree>
          <integer_value rank="0">6</integer_value>
        </quadrature_degree>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-7</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-11</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">50</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
          <convergence_file/>
        </monitors>
        <linear_solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
            <relative_error>
              <real_value rank="0">1.e-7</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">50</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="fieldsplit">
            <composite_type name="multiplicative"/>
            <fieldsplit name="Pressure">
              <field name="Pressure"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="preonly"/>
                <preconditioner name="hypre">
                  <hypre_type name="boomeramg"/>
                </preconditioner>
              </linear_solver>
            </fieldsplit>
            <fieldsplit name="Porosity">
              <field name="Porosity"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="gmres">
                  <restart>
                    <integer_value rank="0">30</integer_value>
                  </restart>
                  <relative_error>
                    <real_value rank="0">1.e-3</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">50</integer_value>
                  </max_iterations>
                  <zero_initial_guess/>
                  <monitors/>
                </iterative_method>
                <preconditioner name="ilu"/>
              </linear_solver>
            </fieldsplit>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
    </nonlinear_solver>
    <solve name="in_timeloop"/>
  </system>
</terraferma_options>