<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Simpson solitary wave benchmark.</string_value>
  </description>
  <simulations>
    <simulation name="Simpson">
      <input_file>
        <string_value lines="1" type="filename">magmawaves.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">16 32 64</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/geometry/mesh::Mesh/source::UnitSquare/number_cells", [int(ncells), int(ncells)])</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="h_on_delta">
          <values>
            <string_value lines="1">64.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

libspud.set_option("/system::magma/coefficient::h_squared/type::Constant/rank::Scalar/value::WholeMesh/constant",float(h_on_delta)**2)</string_value>
            <single_build/>
          </update>
          <comment>height of computational box in compaction lengths</comment>
        </parameter>
        <parameter name="cfl_delta">
          <values>
            <string_value lines="1">0.5 1. 2.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
from math import sqrt

dim = float(libspud.get_option("/geometry/dimension"))
cfl_h = int(ncells)/float(h_on_delta)/sqrt(dim)*float(cfl_delta)

libspud.set_option("/timestepping/timestep/adaptive/constraint[0]/requested_maximum_value",cfl_h)</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="c">
          <values>
            <string_value lines="1">5.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
# need to update c and the background velocity W = -c
libspud.set_option("/system::magma/coefficient::c/type::Constant/rank::Scalar/value::WholeMesh/constant",float(c))
libspud.set_option("/system::magma/coefficient::W/type::Constant/rank::Vector/value::WholeMesh/constant::dim",[0.,-float(c)])</string_value>
            <single_build/>
          </update>
          <comment>wavespeed</comment>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="errors">
          <string_value lines="20" type="code" language="python">from pysolwave.tfsolitarywave import TFSolitaryWave
from glob import glob

input = glob("../*.tfml")[0]
tf = TFSolitaryWave(input)

checkpoints = glob("*_checkpoint*.tfml")
nfiles = len(checkpoints)
lastfile = checkpoints[0].replace("_0.tfml","_{0}.tfml".format(nfiles-1))
print lastfile

errors = tf.geterrors(lastfile)</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="errors">
      <string_value lines="20" type="code" language="python">import operator
import pylab as pl
import numpy as np

#print errors.parameters
ncells = errors.parameters['ncells']
cfl_delta = errors.parameters['cfl_delta']
c = errors.parameters['c'][0]
h_on_delta = errors.parameters['h_on_delta'][0]
print "ncells={0} cfl_delta={1} c={2} h={3}".format(ncells,cfl_delta,c,h_on_delta)
slice0 = {'c':c, 'h_on_delta':h_on_delta}

# collect data for plotting and assertion
relerrors = []
for n in ncells:
  h = float(h_on_delta)/float(n)
  print "ncells = {0}, h={1} ".format(n,h)
  for cfl in cfl_delta:
    slice = slice0.copy()
    slice.update({'ncells':n,'cfl_delta':cfl})
    dt = errors[slice][1]
    cdt_on_del = float(c)*dt*float(h_on_delta)
    rel_err_shape = errors[slice][4]
    rel_err_c = errors[slice][5][1]
    print "cfl_delta={0}: dt={1}, rel_err_shape={2}, rel_err_c={3}".format(cfl,dt,rel_err_shape,rel_err_c)
    relerrors.append([h, cdt_on_del, rel_err_shape, rel_err_c])

relerrors=np.array(relerrors)
#print relerrors

# now make some pretty plots 
# shape error
pl.figure()
ph_shape = []
for n in ncells:
  h = float(h_on_delta)/float(n)
  index = relerrors[:,0] == h
  rn = relerrors[index]
  pl.loglog(rn[:,1],rn[:,2],'o-',label="h={0}".format(h))
  pl.hold(True)
  # and calculate best fit slopes on a log-log plot
  p = np.polyfit(np.log(rn[:,1]),np.log(rn[:,2]),1)
  ph_shape.append(p[0])
  

  
pl.grid()
pl.xlabel('$c\Delta t/\delta$')
pl.ylabel('$||e||_2/||f||_2$')
pl.legend(loc='best')
pl.title("Shape Errors: c={0}".format(c))
pl.savefig("ShapeErrors_c{0}.pdf".format(c))

# velocity error
pl.figure()
ph_velocity = []
for n in ncells:
  h = float(h_on_delta)/float(n)
  index = relerrors[:,0] == h
  rn = relerrors[index]
  pl.loglog(rn[:,1],abs(rn[:,3]),'o-',label="h={0}".format(h))
  pl.hold(True)
  # and calculate best fit slopes on a log-log plot
  p = np.polyfit(np.log(rn[:,1]),np.log(abs(rn[:,3])),1)
  ph_velocity.append(p[0])
  

pl.grid()
pl.xlabel('$c\Delta t/\delta$')
pl.ylabel('$|\Delta c|/c$')
pl.legend(loc='best')
pl.title("relative velocity errors: c={0}".format(c))
pl.savefig("VelocityErrors_c{0}.pdf".format(c))
print "shape error slopes={0}".format(ph_shape)
print "velocity error slopes={0}".format(ph_velocity)


assert (np.all(np.array(ph_shape)&gt; 1.9))
assert (np.all(np.array(ph_velocity)&gt; .9))</string_value>
    </test>
  </tests>
</harness_options>
