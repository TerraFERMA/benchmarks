<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Busse 1a benchmark using low resolution time-dependent run to get closer to steady state then apply Newton. 

The initial time dependent run uses 
busse.tfml  
modified to run to a near steady state tolerance of 5e-5, or a maximum time of 50000.
on a mesh with size ncells_init (e.g. 8)

The second code provides a newton solver for the exact steady state solution initialized by the interpolation of the output of blankenbach_init onto a new mesh of size ncells</string_value>
  </description>
  <simulations>
    <simulation name="BusseSteadyState">
      <input_file>
        <string_value lines="1" type="filename">busse_steadystate.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">16 32</string_value>
          </values>
          <process_scale>
            <integer_value shape="2" rank="1">2 16</integer_value>
          </process_scale>
        </parameter>
        <parameter name="ncells_td">
          <values>
            <string_value lines="1">8</string_value>
          </values>
        </parameter>
        <parameter name="factor_td">
          <values>
            <string_value lines="1">.2</string_value>
          </values>
          <comment>mesh stretching factor for mesh for timedependent runs
factor = 1 means no distortion, uniform triangulation.  smaller factors are more refined towards the edges.</comment>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <simulation name="BusseInterpolate">
          <input_file>
            <string_value lines="1" type="filename">busse_interpolate.tfml</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="ncells"/>
            <parameter name="ncells_td"/>
            <parameter name="factor_td">
              <comment>mesh stretching factor for mesh for timedependent runs
factor = 1 means no distortion, uniform triangulation.  smaller factors are more refined towards the edges.</comment>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="Projections">
              <string>
                <string_value lines="1" type="filename">rbconvection_StokesProject_0.xml</string_value>
              </string>
            </filenames>
          </required_output>
          <dependencies>
            <simulation name="BusseTD">
              <input_file>
                <string_value lines="1" type="filename">busse.tfml</string_value>
              </input_file>
              <run_when name="input_changed_or_output_missing"/>
              <parameter_sweep>
                <parameter name="ncells_td">
                  <update>
                    <string_value lines="20" type="code" language="python">import libspud
# set the mesh for the time-dependent problem
libspud.set_option("/geometry/mesh::Mesh/source::File/file","transfinite_box_td")

# set the maximum run time for the time dependent run
libspud.set_option("/timestepping/finish_time",float(50000.))

# set the courant number to be time accurate
libspud.set_option("/timestepping/timestep/adaptive/constraint::Courant/requested_maximum_value",float(1.))

#set the steady state tolerance 
libspud.set_option("/timestepping/steady_state/tolerance",float(5.e-5))</string_value>
                    <single_build/>
                  </update>
                  <process_scale>
                    <integer_value shape="1" rank="1">2</integer_value>
                  </process_scale>
                </parameter>
                <parameter name="factor_td"/>
              </parameter_sweep>
              <required_output>
                <filenames name="checkpoints">
                  <string>
                    <string_value lines="1" type="filename">rbconvection_Stokes_0.xml</string_value>
                  </string>
                </filenames>
              </required_output>
              <dependencies>
                <run name="MeshTD">
                  <input_file>
                    <string_value lines="1" type="filename">../../src/transfinite_box.geo</string_value>
                  </input_file>
                  <run_when name="input_changed_or_output_missing"/>
                  <parameter_sweep>
                    <parameter name="ncells_td"/>
                    <parameter name="factor_td">
                      <update>
                        <string_value lines="20" type="code" language="python">from string import Template as template
input_file = template(input_file).safe_substitute({'ncells':ncells_td, 'factor':factor_td,
'xaspect':'1.0079','yaspect':'0.6283'})</string_value>
                      </update>
                    </parameter>
                  </parameter_sweep>
                  <required_output>
                    <filenames name="meshfiles">
                      <python>
                        <string_value lines="20" type="code" language="python">meshfiles = ["transfinite_box_td.xml"]</string_value>
                      </python>
                    </filenames>
                  </required_output>
                  <commands>
                    <command name="GMsh">
                      <string_value lines="1">gmsh -3 transfinite_box.geo -o transfinite_box_td.msh</string_value>
                    </command>
                    <command name="Convert">
                      <string_value lines="1">dolfin-convert transfinite_box_td.msh transfinite_box_td.xml</string_value>
                    </command>
                  </commands>
                </run>
              </dependencies>
              <comment>Time dependent initialization run</comment>
            </simulation>
            <run name="Mesh">
              <input_file>
                <string_value lines="1" type="filename">../../src/transfinite_box.geo</string_value>
              </input_file>
              <run_when name="input_changed_or_output_missing"/>
              <parameter_sweep>
                <parameter name="ncells">
                  <update>
                    <string_value lines="20" type="code" language="python">from string import Template as template
input_file = template(input_file).safe_substitute({'ncells':ncells, 'factor':'0.05',
'xaspect':'1.0079','yaspect':'0.6283'})</string_value>
                  </update>
                </parameter>
              </parameter_sweep>
              <required_output>
                <filenames name="meshfiles">
                  <python>
                    <string_value lines="20" type="code" language="python">meshfiles = ["transfinite_box.xml"]</string_value>
                  </python>
                </filenames>
              </required_output>
              <commands>
                <command name="GMsh">
                  <string_value lines="1">gmsh -3 transfinite_box.geo</string_value>
                </command>
                <command name="Convert">
                  <string_value lines="1">dolfin-convert transfinite_box.msh transfinite_box.xml</string_value>
                </command>
              </commands>
            </run>
          </dependencies>
        </simulation>
      </dependencies>
      <variables>
        <variable name="v">
          <string_value lines="20" type="code" language="python">import libspud
from buckettools.statfile import parser
from math import sqrt

libspud.load_options("busse_steadystate.tfml")
ioname = libspud.get_option("/io/output_base_name")
Ra = libspud.get_option("/system::Stokes/coefficient::RayleighNumber/type::Constant/rank::Scalar/value::WholeMesh/constant")
libspud.clear_options()

stat = parser(ioname+".stat")
det  = parser(ioname+".det")

a=1.0079
b=0.6283
v = {}
v["nu"] = -1.0*(stat["Stokes"]["TemperatureTopSurfaceIntegral"]["functional_value"][-1])/(a*b)
v["v_rms"] = sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1]/(a*b))*Ra
v["q00"] = -det["TemperatureGradient"]["TemperatureGradient"]["Top00"][-1][-1]
v["qa0"] = -det["TemperatureGradient"]["TemperatureGradient"]["Topa0"][-1][-1]
v["q0b"] = -det["TemperatureGradient"]["TemperatureGradient"]["Top0b"][-1][-1]
v["qab"] = -det["TemperatureGradient"]["TemperatureGradient"]["Topab"][-1][-1]
v["w00"] =  det["Stokes"]["Velocity_2"]["Mid00"][-1][-1]*Ra
v["w0b"] =  det["Stokes"]["Velocity_2"]["Mid0b"][-1][-1]*Ra
v["T00"] =  det["Stokes"]["Temperature"]["Mid00"][-1][-1]
v["T0b"] =  det["Stokes"]["Temperature"]["Mid0b"][-1][-1]
v["Walltime"] = stat["ElapsedWallTime"]["value"][-1]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="relative_errors_less_than_10_percent">
      <string_value lines="20" type="code" language="python">import csv
vb = {}
filehandle = open("benchmark.csv")
for key,val in csv.reader(filehandle):
  vb[key] = float(val)
filehandle.close()

print vb

import numpy
vfine = v[{'ncells': v.parameters['ncells'][-1]}]
rerr = {}
for key,val in vb.items():
  rerr[key] = abs(vfine[key]-val)/abs(val)
print "relative errors = ", rerr


table0 = []
table0.append("\\begin{tabular}{c|cccccccccc}\n")
table0.append("    &amp; $\Nu$ &amp; $v_{rms}$ &amp; $q_{00}$ &amp; $q_{a0}$ &amp;  $q_{0b}$ &amp;$q_{ab}$ &amp; $T_{00}$ &amp; $T_{0b}$ &amp; $w_{00}$ &amp; w_{0b} \\\\\n")
table0.append("\hline\n")
resultstring = "&amp; {nu:.3f} &amp; {v_rms:.3f} &amp; {q00:.3f} &amp; {qa0:.3f} &amp; {q0b:.3f} &amp; {qab:.3f} &amp;{T00:.3f} &amp; {T0b:.3f} &amp;{w00:.3f} &amp; {w0b:.3f} \\\\\n"
for ncells in v.parameters['ncells']:
  table0.append(("{ncells:2d}$\\times${ncells:2d}$\\times${ncells:2d} "+resultstring).format(ncells=int(ncells), **v[{'ncells':ncells}]))
table0.append("\hline\n")
table0.append(("Benchmark "+resultstring).format(**vb))
table0.append("\\end{tabular}\n")

for line in table0:
  print line[0:-1]

filename = "table0.tex"
filehandle = file(filename, 'w')
filehandle.writelines(table0)
filehandle.close()
assert(numpy.all(numpy.array(rerr.values()) &lt; 0.1))</string_value>
    </test>
    <test name="Walltime">
      <string_value lines="20" type="code" language="python">ncells = v.parameters['ncells']
slice = {'ncells': ncells}
print 'walltime =',[ v[slice][i]["Walltime"] for i in range(len(ncells)) ]</string_value>
    </test>
  </tests>
</harness_options>
