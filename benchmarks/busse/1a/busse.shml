<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">long</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Busse 1a benchmark.</string_value>
  </description>
  <simulations>
    <simulation name="Busse">
      <input_file>
        <string_value type="filename" lines="1">busse.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">8 16</string_value>
          </values>
          <process_scale>
            <integer_value rank="1" shape="2">2 16</integer_value>
          </process_scale>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value type="filename" lines="1">../../src/transfinite_box.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="ncells">
              <update>
                <string_value type="code" language="python3" lines="20">from string import Template as template
input_file = template(input_file).safe_substitute({'ncells':ncells, 'factor':'0.01',
'xaspect':'1.0079','yaspect':'0.6283'})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="meshfiles">
              <python>
                <string_value type="code" language="python3" lines="20">meshfiles = ["transfinite_box"+ext for ext in [".xdmf", ".h5", "_facet_ids.xdmf", "_facet_ids.h5", "_cell_ids.xdmf", "_cell_ids.h5"]]</string_value>
              </python>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -3 transfinite_box.geo</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">tfgmsh2xdmf transfinite_box.msh</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="v">
          <string_value type="code" language="python3" lines="20">import libspud
from buckettools.statfile import parser
from math import sqrt

libspud.load_options("busse.tfml")
ioname = libspud.get_option("/io/output_base_name")
Ra = libspud.get_option("/system::Stokes/coefficient::RayleighNumber/type::Constant/rank::Scalar/value::WholeMesh/constant")
libspud.clear_options()

stat = parser(ioname+".stat")
det  = parser(ioname+".det")

v = {}
v["nu"] = -1.0*(stat["Stokes"]["TemperatureTopSurfaceIntegral"]["functional_value"][-1])
v["v_rms"] = sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1])*Ra
v["q00"] = -det["TemperatureGradient"]["TemperatureGradient"]["Top00"][-1][-1]
v["qa0"] = -det["TemperatureGradient"]["TemperatureGradient"]["Topa0"][-1][-1]
v["q0b"] = -det["TemperatureGradient"]["TemperatureGradient"]["Top0b"][-1][-1]
v["qab"] = -det["TemperatureGradient"]["TemperatureGradient"]["Topab"][-1][-1]
v["w00"] =  det["Stokes"]["Velocity_2"]["Mid00"][-1][-1]*Ra
v["w0b"] =  det["Stokes"]["Velocity_2"]["Mid0b"][-1][-1]*Ra
v["T00"] =  det["Stokes"]["Temperature"]["Mid00"][-1][-1]
v["T0b"] =  det["Stokes"]["Temperature"]["Mid0b"][-1][-1]
v["Walltime"] = stat["ElapsedWallTime"]["value"][-1]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="relative_errors_less_than_10_percent">
      <string_value type="code" language="python3" lines="20">import csv
vb = {}
filehandle = open("benchmark.csv")
for key,val in csv.reader(filehandle):
  vb[key] = float(val)
filehandle.close()

print(vb)

import numpy
vfine = v[{'ncells': v.parameters['ncells'][-1]}]
rerr = {}
for key,val in list(vb.items()):
  rerr[key] = abs(vfine[key]-val)/abs(val)
print("relative errors = ", rerr)


table0 = []
table0.append("\\begin{tabular}{c|cccccccccc}\n")
table0.append("    &amp; $\Nu$ &amp; $v_{rms}$ &amp; $q_{00}$ &amp; $q_{a0}$ &amp;  $q_{0b}$ &amp;$q_{ab}$ &amp; $T_{00}$ &amp; $T_{0b}$ &amp; $w_{00}$ &amp; w_{0b} \\\\\n")
table0.append("\hline\n")
resultstring = "&amp; {nu:.3f} &amp; {v_rms:.3f} &amp; {q00:.3f} &amp; {qa0:.3f} &amp; {q0b:.3f} &amp; {qab:.3f} &amp;{T00:.3f} &amp; {T0b:.3f} &amp;{w00:.3f} &amp; {w0b:.3f} \\\\\n"
for ncells in v.parameters['ncells']:
  table0.append(("{ncells:2d}$\\times${ncells:2d}$\\times${ncells:2d} "+resultstring).format(ncells=int(ncells), **v[{'ncells':ncells}]))
table0.append("\hline\n")
table0.append(("Benchmark "+resultstring).format(**vb))
table0.append("\\end{tabular}\n")

for line in table0:
  print(line[0:-1])

filename = "table0.tex"
filehandle = file(filename, 'w')
filehandle.writelines(table0)
filehandle.close()
assert(numpy.all(numpy.array(list(rerr.values())) &lt; 0.1))</string_value>
    </test>
    <test name="walltime">
      <string_value type="code" language="python3" lines="20">ncells = v.parameters['ncells']
slice = {'ncells': ncells}
print('walltime =',[ v[slice][i]["Walltime"] for i in range(len(ncells)) ])</string_value>
    </test>
  </tests>
</harness_options>
