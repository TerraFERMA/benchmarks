<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">long</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">Blankenbach 1a benchmark.</string_value>
  </description>
  <simulations>
    <simulation name="Blankenbach">
      <input_file>
        <string_value type="filename" lines="1">blankenbach.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">16 32 64 128 256</string_value>
          </values>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value type="filename" lines="1">../../src/transfinite_square.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="ncells">
              <update>
                <string_value type="code" language="python3" lines="20">from string import Template as template
input_file = template(input_file).safe_substitute({'ncells':ncells, 'factor':'0.01'})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="meshfiles">
              <python>
                <string_value type="code" language="python3" lines="20">meshfiles = ["transfinite_square"+ext for ext in [".xdmf", ".h5", "_cell_ids.xdmf", "_cell_ids.h5", "_facet_ids.xdmf", "_facet_ids.h5"]]</string_value>
              </python>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -2 transfinite_square.geo</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">tfgmsh2xdmf transfinite_square.msh</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="v">
          <string_value type="code" language="python3" lines="20">import libspud
from buckettools.statfile import parser
from math import sqrt

libspud.load_options("blankenbach.tfml")
ioname = libspud.get_option("/io/output_base_name")
Ra = libspud.get_option("/system::Stokes/coefficient::RayleighNumber/type::Constant/rank::Scalar/value::WholeMesh/constant")
libspud.clear_options()

stat = parser(ioname+".stat")
det  = parser(ioname+".det")

v = {}
v["nu"] = -1.0*(stat["Stokes"]["TemperatureTopSurfaceIntegral"]["functional_value"][-1])
v["v_rms"] = sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1])*Ra
v["q1"] = -det["TemperatureGradient"]["TemperatureGradient"]["TopLeft"][-1][-1]
v["q2"] = -det["TemperatureGradient"]["TemperatureGradient"]["TopRight"][-1][-1]
v["q3"] = -det["TemperatureGradient"]["TemperatureGradient"]["BottomRight"][-1][-1]
v["q4"] = -det["TemperatureGradient"]["TemperatureGradient"]["BottomLeft"][-1][-1]
detlen = len(det["Stokes"]["Temperature"]["Array"][:,-1])
expos1 = det["Stokes"]["Temperature"]["Array"][0:detlen/2,-1].argmin()
v["Te1"] = det["Stokes"]["Temperature"]["Array"][0:detlen/2,-1][expos1]
v["ze1"] = det["Array"]["position_1"][0:detlen/2,-1][expos1]
expos2 = det["Stokes"]["Temperature"]["Array"][detlen/2:,-1].argmax()
v["Te2"] = det["Stokes"]["Temperature"]["Array"][detlen/2:,-1][expos2]
v["ze2"] = det["Array"]["position_1"][detlen/2:,-1][expos2]
v["Walltime"] = stat["ElapsedWallTime"]["value"][-1]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="relative_errors_less_than_10_percent">
      <string_value type="code" language="python3" lines="20">import csv
vb = {}
filehandle = open("benchmark.csv")
for key,val in csv.reader(filehandle):
  vb[key] = float(val)
filehandle.close()

import numpy
vfine = v[{'ncells': v.parameters['ncells'][-1]}]
rerr = {}
for key,val in list(vb.items()):
  rerr[key] = abs(vfine[key]-val)/abs(val)
print("relative errors = ", rerr)
assert(numpy.all(numpy.array(list(rerr.values())) &lt; 0.1))

table0 = []
table0.append("\\begin{tabular}{c|cccccc}\n")
table0.append("    &amp; $\Nu$ &amp; $v_{rms}$ &amp; $q_1$ &amp; $q_2$ &amp; $T_{e}$ &amp; $z_{e}$ \\\\\n")
table0.append("\hline\n")
resultstring = "&amp; {nu:.3f} &amp; {v_rms:.3f} &amp; {q1:.3f} &amp; {q2:.3f} &amp; {Te1:.3f} &amp; {ze1:.3f} \\\\\n"
for ncells in v.parameters['ncells']:
  table0.append(("{ncells:2d}$\\times${ncells:2d} "+resultstring).format(ncells=int(ncells), **v[{'ncells':ncells}]))
table0.append("\hline\n")
table0.append(("Benchmark "+resultstring).format(**vb))
table0.append("\\end{tabular}\n")

for line in table0:
  print(line[0:-1])

filename = "table0.tex"
filehandle = file(filename, 'w')
filehandle.writelines(table0)
filehandle.close()</string_value>
    </test>
    <test name="Walltime">
      <string_value type="code" language="python3" lines="20">ncells = v.parameters['ncells']
slice = {'ncells': ncells}
print('walltime =',[ v[slice][i]["Walltime"] for i in range(len(ncells)) ])</string_value>
    </test>
  </tests>
</harness_options>
