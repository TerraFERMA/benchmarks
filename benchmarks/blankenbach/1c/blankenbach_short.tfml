<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="File">
        <file>
          <string_value lines="1" type="filename">transfinite_square</string_value>
        </file>
        <cell>
          <string_value lines="1">triangle</string_value>
        </cell>
      </source>
    </mesh>
    <mesh name="MeshInit">
      <source name="File">
        <file>
          <string_value lines="1" type="filename">transfinite_square_td</string_value>
          <comment>mesh for time-dependent initial file</comment>
        </file>
        <cell>
          <string_value lines="1">triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">rbconvection_short</string_value>
    </output_base_name>
    <visualization>
      <element name="P2DG">
        <family>
          <string_value lines="1">DG</string_value>
        </family>
        <degree>
          <integer_value rank="0">2</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods>
      <detectors_period>
        <real_value rank="0">1.e4</real_value>
      </detectors_period>
    </dump_periods>
    <detectors>
      <point name="TopLeft">
        <real_value shape="2" dim1="dim" rank="1">0.0 1.0</real_value>
      </point>
      <point name="TopRight">
        <real_value shape="2" dim1="dim" rank="1">1.0 1.0</real_value>
      </point>
      <point name="BottomLeft">
        <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
      </point>
      <point name="BottomRight">
        <real_value shape="2" dim1="dim" rank="1">1.0 0.0</real_value>
      </point>
      <array name="Array">
        <python>
          <string_value lines="20" type="code" language="python">def val():
  from numpy import arange
  loc = [[0.5, y] for y in arange(0.0,1.0+1./1000.,1./1000.)]
  return loc</string_value>
        </python>
      </array>
    </detectors>
  </io>
  <global_parameters>
    <ufl>
      <string_value lines="20" type="code" language="python"># Constant viscosity
eta = 1.

#Inverse Ra number 
recRa = 1./Ra</string_value>
    </ufl>
  </global_parameters>
  <system name="Init">
    <mesh name="MeshInit"/>
    <ufl_symbol name="global">
      <string_value lines="1">ui</string_value>
    </ufl_symbol>
    <field name="VelocityInit">
      <ufl_symbol name="global">
        <string_value lines="1">vi</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Vector" rank="1">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <file>
              <string_value lines="1">rbconvection_Stokes_0.xml</string_value>
            </file>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
      </diagnostics>
    </field>
    <field name="PressureInit">
      <ufl_symbol name="global">
        <string_value lines="1">pi</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <file>
              <string_value lines="1">rbconvection_Stokes_0.xml</string_value>
            </file>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
      </diagnostics>
    </field>
    <field name="TemperatureInit">
      <ufl_symbol name="global">
        <string_value lines="1">Ti</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <file>
              <string_value lines="1">rbconvection_Stokes_0.xml</string_value>
            </file>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Project">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">F = inner(ui_t,(ui_i - ui_n))*dx</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">F</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">J = derivative(F, ui_i, ui_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">J</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <snes_type name="ksponly"/>
        <relative_error>
          <real_value rank="0">1.e-3</real_value>
        </relative_error>
        <max_iterations>
          <integer_value rank="0">10</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="cg">
            <relative_error>
              <real_value rank="0">1.e-6</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">10</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors/>
          </iterative_method>
          <preconditioner name="sor"/>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="never"/>
      <comment>Unfortunately,  you seem to need a solver here to return the appropriate function space, even if you don't solve anything.
Here I'll just do a simple projection</comment>
    </nonlinear_solver>
  </system>
  <system name="Stokes">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">us</string_value>
    </ufl_symbol>
    <field name="Velocity">
      <ufl_symbol name="global">
        <string_value lines="1">v</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Vector" rank="1">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <cpp rank="1">
              <members>
                <string_value lines="20" type="code" language="cpp">GenericFunction_ptr Tinit_ptr;
GenericFunction_ptr vinit_ptr;
GenericFunction_ptr pinit_ptr;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">// get pointers to the initial Temperature, velocity and pressure

Tinit_ptr = bucket()-&gt;fetch_system("Init")-&gt;fetch_field("TemperatureInit")-&gt;genericfunction_ptr(time());
vinit_ptr = bucket()-&gt;fetch_system("Init")-&gt;fetch_field("VelocityInit")-&gt;genericfunction_ptr(time());
pinit_ptr = bucket()-&gt;fetch_system("Init")-&gt;fetch_field("PressureInit")-&gt;genericfunction_ptr(time());</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">printf("x,y=(%g,%g)\n",x[0],x[1]);
vinit_ptr-&gt;eval(values,x,cell);</string_value>
              </eval>
            </cpp>
          </initial_condition>
          <boundary_condition name="LeftX">
            <boundary_ids>
              <integer_value shape="1" rank="1">1</integer_value>
            </boundary_ids>
            <sub_components name="X">
              <components>
                <integer_value shape="1" rank="1">0</integer_value>
              </components>
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="RightX">
            <boundary_ids>
              <integer_value shape="1" rank="1">2</integer_value>
            </boundary_ids>
            <sub_components name="X">
              <components>
                <integer_value shape="1" rank="1">0</integer_value>
              </components>
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="BottomY">
            <boundary_ids>
              <integer_value shape="1" rank="1">3</integer_value>
            </boundary_ids>
            <sub_components name="Y">
              <components>
                <integer_value shape="1" rank="1">1</integer_value>
              </components>
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="TopY">
            <boundary_ids>
              <integer_value shape="1" rank="1">4</integer_value>
            </boundary_ids>
            <sub_components name="Y">
              <components>
                <integer_value shape="1" rank="1">1</integer_value>
              </components>
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
        <include_in_steady_state>
          <norm>
            <string_value lines="1">linf</string_value>
          </norm>
        </include_in_steady_state>
        <include_in_detectors/>
      </diagnostics>
    </field>
    <field name="Pressure">
      <ufl_symbol name="global">
        <string_value lines="1">p</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <cpp rank="0">
              <members>
                <string_value lines="20" type="code" language="cpp">GenericFunction_ptr Tinit_ptr;
GenericFunction_ptr vinit_ptr;
GenericFunction_ptr pinit_ptr;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">// get pointers to the initial Temperature, velocity and pressure

Tinit_ptr = bucket()-&gt;fetch_system("Init")-&gt;fetch_field("TemperatureInit")-&gt;genericfunction_ptr(time());
vinit_ptr = bucket()-&gt;fetch_system("Init")-&gt;fetch_field("VelocityInit")-&gt;genericfunction_ptr(time());
pinit_ptr = bucket()-&gt;fetch_system("Init")-&gt;fetch_field("PressureInit")-&gt;genericfunction_ptr(time());</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">pinit_ptr-&gt;eval(values,x,cell);</string_value>
              </eval>
            </cpp>
          </initial_condition>
          <reference_point name="Point">
            <coordinates>
              <real_value shape="2" dim1="dim" rank="1">0.5 0.5</real_value>
            </coordinates>
          </reference_point>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
        <include_in_steady_state>
          <norm>
            <string_value lines="1">linf</string_value>
          </norm>
        </include_in_steady_state>
      </diagnostics>
    </field>
    <field name="Temperature">
      <ufl_symbol name="global">
        <string_value lines="1">T</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <cpp rank="0">
              <members>
                <string_value lines="20" type="code" language="cpp">GenericFunction_ptr Tinit_ptr;
GenericFunction_ptr vinit_ptr;
GenericFunction_ptr pinit_ptr;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">// get pointers to the initial Temperature, velocity and pressure

Tinit_ptr = bucket()-&gt;fetch_system("Init")-&gt;fetch_field("TemperatureInit")-&gt;genericfunction_ptr(time());
vinit_ptr = bucket()-&gt;fetch_system("Init")-&gt;fetch_field("VelocityInit")-&gt;genericfunction_ptr(time());
pinit_ptr = bucket()-&gt;fetch_system("Init")-&gt;fetch_field("PressureInit")-&gt;genericfunction_ptr(time());</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">Tinit_ptr-&gt;eval(values,x,cell);</string_value>
              </eval>
            </cpp>
          </initial_condition>
          <boundary_condition name="Top">
            <boundary_ids>
              <integer_value shape="1" rank="1">4</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="Bottom">
            <boundary_ids>
              <integer_value shape="1" rank="1">3</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">1.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
        <include_in_steady_state>
          <norm>
            <string_value lines="1">linf</string_value>
          </norm>
        </include_in_steady_state>
        <include_in_detectors/>
      </diagnostics>
    </field>
    <coefficient name="RayleighNumber">
      <ufl_symbol name="global">
        <string_value lines="1">Ra</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">1.e6</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <nonlinear_solver name="Newton">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">rT = (T_t*inner(v_i, grad(T_i)) + recRa*inner(grad(T_t), grad(T_i)))*dx
rv = (inner(sym(grad(v_t)), 2.*eta*sym(grad(v_i))) - div(v_t)*p_i - T_i*v_t[1])*dx
rp = p_t*div(v_i)*dx


r = rT + rv + rp</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">a = derivative(r, us_i, us_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-7</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1e-10</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">50</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
          <convergence_file/>
        </monitors>
        <linear_solver>
          <iterative_method name="fgmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
            <relative_error>
              <real_value rank="0">1.e-3</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">100</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="fieldsplit">
            <composite_type name="multiplicative"/>
            <fieldsplit name="Stokes">
              <field name="Pressure"/>
              <field name="Velocity"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="preonly"/>
                <preconditioner name="lu">
                  <factorization_package name="mumps"/>
                </preconditioner>
              </linear_solver>
            </fieldsplit>
            <fieldsplit name="Temperature">
              <field name="Temperature"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="preonly"/>
                <preconditioner name="lu">
                  <factorization_package name="mumps"/>
                </preconditioner>
              </linear_solver>
            </fieldsplit>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
    <functional name="VelocityL2NormSquared">
      <string_value lines="20" type="code" language="python">int = inner(v,v)*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="PressureIntegral">
      <string_value lines="20" type="code" language="python">int = p*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="TemperatureTopSurfaceIntegral">
      <string_value lines="20" type="code" language="python">int = T.dx(1)*ds(4)</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="TemperatureBottomSurfaceIntegral">
      <string_value lines="20" type="code" language="python">int = T.dx(1)*ds(3)</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
  </system>
  <system name="Divergence">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">ud</string_value>
    </ufl_symbol>
    <field name="Divergence">
      <ufl_symbol name="global">
        <string_value lines="1">d</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Solver">
      <type name="Picard">
        <preamble>
          <string_value lines="20" type="code" language="python">r = (d_t*d_a - d_t*div(v_i))*dx</string_value>
        </preamble>
        <form name="Bilinear" rank="1">
          <string_value lines="20" type="code" language="python">a = lhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form name="Linear" rank="0">
          <string_value lines="20" type="code" language="python">L = rhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">L</string_value>
          </ufl_symbol>
        </form>
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">res = action(a, ud_i) - L</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">res</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-10</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="cg">
            <relative_error>
              <real_value rank="0">1.e-6</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">100</integer_value>
            </max_iterations>
            <nonzero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="sor"/>
          <monitors/>
        </linear_solver>
        <ignore_all_solver_failures/>
      </type>
      <solve name="with_diagnostics"/>
    </nonlinear_solver>
  </system>
  <system name="TemperatureGradient">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">uq</string_value>
    </ufl_symbol>
    <field name="TemperatureGradient">
      <ufl_symbol name="global">
        <string_value lines="1">q</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1DG">
            <family>
              <string_value lines="1">DG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
        <include_in_detectors/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Solver">
      <type name="Picard">
        <preamble>
          <string_value lines="20" type="code" language="python">r = q_t*q_a*dx - q_t*T_i.dx(1)*dx</string_value>
        </preamble>
        <form name="Bilinear" rank="1">
          <string_value lines="20" type="code" language="python">a = lhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form name="Linear" rank="0">
          <string_value lines="20" type="code" language="python">L = rhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">L</string_value>
          </ufl_symbol>
        </form>
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">res = action(a, uq_i) - L</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">res</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-10</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="cg">
            <relative_error>
              <real_value rank="0">1.e-9</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">500</integer_value>
            </max_iterations>
            <nonzero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="sor"/>
          <monitors/>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="with_diagnostics"/>
    </nonlinear_solver>
  </system>
</terraferma_options>
