<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="File">
        <file>
          <string_value lines="1" type="filename">tank</string_value>
        </file>
        <cell>
          <string_value>triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">plume</string_value>
    </output_base_name>
    <visualization>
      <element name="P2">
        <family>
          <string_value>CG</string_value>
        </family>
        <degree>
          <integer_value rank="0">2</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods>
      <visualization_period>
        <real_value rank="0">1.0</real_value>
      </visualization_period>
    </dump_periods>
    <detectors/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <finish_time>
      <real_value rank="0">160.0</real_value>
    </finish_time>
    <timestep>
      <coefficient name="Timestep">
        <ufl_symbol name="global">
          <string_value lines="1">dt</string_value>
        </ufl_symbol>
        <type name="Constant">
          <rank name="Scalar" rank="0">
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">0.0</real_value>
              </constant>
            </value>
          </rank>
        </type>
      </coefficient>
      <adaptive>
        <constraint name="CourantNumber">
          <system name="CourantNumber"/>
          <field name="CourantNumber"/>
          <requested_maximum_value>
            <real_value rank="0">2.5</real_value>
          </requested_maximum_value>
        </constraint>
        <increase_tolerance>
          <real_value rank="0">1.1</real_value>
        </increase_tolerance>
      </adaptive>
    </timestep>
  </timestepping>
  <global_parameters>
    <ufl>
      <string_value lines="20" type="code" language="python">g = 9.81
kappa = 1.1749581853116405e-07

rho0 = 991
alpha = 9.4e-4

b0=-7.11
b1=1892
deltaT=273.15
mu = exp(b0 + b1/(T_i + deltaT))

theta = 0.5
theta_v = 0.5

radius = SpatialCoordinate(us.cell())[0]</string_value>
    </ufl>
  </global_parameters>
  <system name="Silicone">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">us</string_value>
    </ufl_symbol>
    <field name="Velocity">
      <ufl_symbol name="global">
        <string_value lines="1">v</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Vector" rank="1">
          <element name="P2">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant name="dim">
              <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
            </constant>
          </initial_condition>
          <boundary_condition name="BottomInclHeater">
            <boundary_ids>
              <integer_value shape="2" rank="1">30 34</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant name="dim">
                  <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="Top">
            <boundary_ids>
              <integer_value shape="1" rank="1">28</integer_value>
            </boundary_ids>
            <sub_components name="Z">
              <components>
                <integer_value shape="1" rank="1">1</integer_value>
              </components>
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="Centre">
            <boundary_ids>
              <integer_value shape="1" rank="1">27</integer_value>
            </boundary_ids>
            <sub_components name="R">
              <components>
                <integer_value shape="1" rank="1">0</integer_value>
              </components>
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="Radius">
            <boundary_ids>
              <integer_value shape="1" rank="1">29</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant name="dim">
                  <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <field name="Pressure">
      <ufl_symbol name="global">
        <string_value lines="1">p</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <field name="Temperature">
      <ufl_symbol name="global">
        <string_value lines="1">T</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">19.56</real_value>
            </constant>
          </initial_condition>
          <boundary_condition name="BottomTopRadius">
            <boundary_ids>
              <integer_value shape="3" rank="1">28 29 30</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">19.56</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="Heater">
            <boundary_ids>
              <integer_value shape="1" rank="1">34</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <python rank="0">
                  <string_value lines="20" type="code" language="python">from numpy import array
from operator import itemgetter
heater = array([[   0.      ,   19.55854 ],
       [   3.994873,   22.34852 ],
       [   8.000977,   25.13962 ],
       [  12.00684 ,   28.29539 ],
       [  16.01294 ,   30.92794 ],
       [  20.01904 ,   33.1297  ],
       [  24.02393 ,   35.01271 ],
       [  28.03003 ,   36.639   ],
       [  32.02588 ,   38.00395 ],
       [  36.02197 ,   39.22122 ],
       [  40.03687 ,   40.2522  ],
       [  44.04297 ,   41.14912 ],
       [  48.03882 ,   41.92882 ],
       [  52.03491 ,   42.58994 ],
       [  56.04004 ,   43.17491 ],
       [  60.05591 ,   43.64975 ],
       [  64.052   ,   44.04055 ],
       [  68.05786 ,   44.37424 ],
       [  72.06299 ,   44.6076  ],
       [  76.06885 ,   44.75335 ],
       [  80.07495 ,   44.88227 ],
       [  84.08081 ,   45.00491 ],
       [  88.08594 ,   45.10716 ],
       [  92.08203 ,   45.20779 ],
       [  96.08789 ,   45.29536 ],
       [ 100.084   ,   45.37451 ],
       [ 104.0789  ,   45.45336 ],
       [ 108.085   ,   45.51838 ],
       [ 112.0808  ,   45.55589 ],
       [ 116.0869  ,   45.59969 ],
       [ 120.082   ,   45.6353  ],
       [ 124.0879  ,   45.65706 ],
       [ 128.084   ,   45.69704 ],
       [ 132.0898  ,   45.70629 ],
       [ 136.085   ,   45.73402 ],
       [ 140.0908  ,   45.73458 ],
       [ 144.0969  ,   45.75578 ],
       [ 148.093   ,   45.74653 ],
       [ 152.0879  ,   45.76013 ],
       [ 156.084   ,   45.76557 ],
       [ 160.0898  ,   45.76475 ],
       [ 164.0859  ,   45.76585 ],
       [ 168.0908  ,   45.77619 ],
       [ 172.0869  ,   45.78026 ],
       [ 176.093   ,   45.79114 ],
       [ 180.0889  ,   45.80067 ]])

def val(x,t):
   global heater, array, itemgetter
   time = array(map(itemgetter(0), heater))
   temperature = array(map(itemgetter(1), heater))
   if(t&gt;time[-1]):
      return -666.0
   else:
      tindex = abs(time-t).argmin()
      if(t &gt; time[tindex]):
         tupindex = tindex+1
         tdnindex = tindex
      else:
         tupindex = tindex
         tdnindex = tindex-1
      tfrac = (t-time[tdnindex])/(time[tupindex]-time[tdnindex])
      return tfrac*temperature[tupindex] + (1.-tfrac)*temperature[tdnindex]</string_value>
                </python>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Preliminary">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">v_theta = theta_v*v_i + (1.-theta_v)*v_n

rv = inner(v_t, (v_i-v_n))*dx
rp = p_t*(p_i-p_n)*dx
rT = (T_t*radius*((T_i - T_n) \
           + dt*theta*inner(v_theta, grad(T_i)) + dt*(1.-theta)*inner(v_theta, grad(T_n))) \
           + radius*dt*theta*kappa*inner(grad(T_t), grad(T_i)) + radius*dt*(1.-theta)*kappa*inner(grad(T_t), grad(T_n))\
     )*dx

r = rv + rp + rT</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">a = derivative(r, us_i, us_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-5</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-8</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="fgmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
            <relative_error>
              <real_value rank="0">1.e-6</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">100</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="fieldsplit">
            <composite_type name="additive"/>
            <fieldsplit name="Stokes">
              <field name="Velocity"/>
              <field name="Pressure"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="preonly"/>
                <preconditioner name="jacobi"/>
              </linear_solver>
            </fieldsplit>
            <fieldsplit name="Temperature">
              <field name="Temperature"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="gmres">
                  <restart>
                    <integer_value rank="0">30</integer_value>
                  </restart>
                  <relative_error>
                    <real_value rank="0">1.e-9</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">1000</integer_value>
                  </max_iterations>
                  <zero_initial_guess/>
                  <monitors>
                    <preconditioned_residual/>
                  </monitors>
                </iterative_method>
                <preconditioner name="ilu"/>
              </linear_solver>
            </fieldsplit>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">v_theta = theta_v*v_i + (1.-theta_v)*v_n

rv = (radius*inner(sym(grad(v_t)), 2.*mu*sym(grad(v_i))) + v_t[0]*2.*mu*v_i[0]/radius \
      - (radius*div(v_t) + v_t[0])*p_i \
      - radius*alpha*g*rho0*T_i*v_t[1])*dx
rp = p_t*(radius*div(v_i) + v_i[0])*dx
rT = (T_t*radius*((T_i - T_n) \
           + dt*theta*inner(v_theta, grad(T_i)) + dt*(1.-theta)*inner(v_theta, grad(T_n))) \
           + radius*dt*theta*kappa*inner(grad(T_t), grad(T_i)) + radius*dt*(1.-theta)*kappa*inner(grad(T_t), grad(T_n))\
     )*dx

r = rv + rp + rT</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">a = derivative(r, us_i, us_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form name="JacobianPC" rank="1">
          <string_value lines="20" type="code" language="python">invmu = 1./mu

aPC = a + invmu*p_t*p_a*radius*dx</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">aPC</string_value>
          </ufl_symbol>
        </form>
        <quadrature_degree>
          <integer_value rank="0">6</integer_value>
        </quadrature_degree>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-9</real_value>
        </absolute_error>
        <solution_error>
          <real_value rank="0">1.e-10</real_value>
        </solution_error>
        <max_iterations>
          <integer_value rank="0">50</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="fgmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
            <relative_error>
              <real_value rank="0">1.e-7</real_value>
            </relative_error>
            <absolute_error>
              <real_value rank="0">1.e-10</real_value>
            </absolute_error>
            <max_iterations>
              <integer_value rank="0">200</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="fieldsplit">
            <composite_type name="multiplicative"/>
            <fieldsplit name="Stokes">
              <field name="Pressure"/>
              <field name="Velocity"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="fgmres">
                  <restart>
                    <integer_value rank="0">30</integer_value>
                  </restart>
                  <relative_error>
                    <real_value rank="0">1.e-7</real_value>
                  </relative_error>
                  <absolute_error>
                    <real_value rank="0">1.e-10</real_value>
                  </absolute_error>
                  <max_iterations>
                    <integer_value rank="0">200</integer_value>
                  </max_iterations>
                  <zero_initial_guess/>
                  <monitors>
                    <preconditioned_residual/>
                  </monitors>
                </iterative_method>
                <preconditioner name="fieldsplit">
                  <composite_type name="multiplicative"/>
                  <fieldsplit name="Pressure">
                    <field name="Pressure"/>
                    <monitors/>
                    <linear_solver>
                      <iterative_method name="cg">
                        <relative_error>
                          <real_value rank="0">1.e-9</real_value>
                        </relative_error>
                        <max_iterations>
                          <integer_value rank="0">1000</integer_value>
                        </max_iterations>
                        <zero_initial_guess/>
                        <monitors>
                          <preconditioned_residual/>
                        </monitors>
                      </iterative_method>
                      <preconditioner name="sor"/>
                    </linear_solver>
                  </fieldsplit>
                  <fieldsplit name="Velocity">
                    <field name="Velocity"/>
                    <monitors/>
                    <linear_solver>
                      <iterative_method name="preonly"/>
                      <preconditioner name="fieldsplit">
                        <composite_type name="multiplicative"/>
                        <fieldsplit name="Velocity0">
                          <field name="Velocity">
                            <components>
                              <integer_value shape="1" rank="1">0</integer_value>
                            </components>
                          </field>
                          <monitors/>
                          <linear_solver>
                            <iterative_method name="preonly"/>
                            <preconditioner name="hypre">
                              <hypre_type name="boomeramg"/>
                            </preconditioner>
                          </linear_solver>
                        </fieldsplit>
                        <fieldsplit name="Velocity1">
                          <field name="Velocity">
                            <components>
                              <integer_value shape="1" rank="1">1</integer_value>
                            </components>
                          </field>
                          <monitors/>
                          <linear_solver>
                            <iterative_method name="preonly"/>
                            <preconditioner name="hypre">
                              <hypre_type name="boomeramg"/>
                            </preconditioner>
                          </linear_solver>
                        </fieldsplit>
                      </preconditioner>
                    </linear_solver>
                  </fieldsplit>
                </preconditioner>
              </linear_solver>
            </fieldsplit>
            <fieldsplit name="Temperature">
              <field name="Temperature"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="gmres">
                  <restart>
                    <integer_value rank="0">30</integer_value>
                  </restart>
                  <relative_error>
                    <real_value rank="0">1.e-9</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">1000</integer_value>
                  </max_iterations>
                  <zero_initial_guess/>
                  <monitors>
                    <preconditioned_residual/>
                  </monitors>
                </iterative_method>
                <preconditioner name="ilu"/>
              </linear_solver>
            </fieldsplit>
          </preconditioner>
          <remove_null_space>
            <null_space name="Pressure">
              <field name="Pressure">
                <constant>
                  <real_value rank="0">1.0</real_value>
                </constant>
              </field>
              <monitors/>
            </null_space>
            <monitors/>
          </remove_null_space>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
  </system>
  <system name="CourantNumber">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">uc</string_value>
    </ufl_symbol>
    <field name="CourantNumber">
      <ufl_symbol name="global">
        <string_value lines="1">c</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P0">
            <family>
              <string_value>DG</string_value>
            </family>
            <degree>
              <integer_value rank="0">0</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Solver">
      <type name="Picard">
        <preamble>
          <string_value lines="20" type="code" language="python">n = FacetNormal(c_e.cell())
vn = dot(v_i, n)
vout = 0.5*(vn + abs(vn))

r = c_t*c_a*dx - c_t('+')*vout('+')*dt('+')*dS - c_t('-')*vout('-')*dt('-')*dS - c_t*vout*dt*ds(1) - c_t*vout*dt*ds(2) - c_t*vout*dt*ds(3) - c_t*vout*dt*ds(4)</string_value>
        </preamble>
        <form name="Bilinear" rank="1">
          <string_value lines="20" type="code" language="python">a = lhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form name="Linear" rank="0">
          <string_value lines="20" type="code" language="python">L = rhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">L</string_value>
          </ufl_symbol>
        </form>
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">res = action(a, uc_i) - L</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">res</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-16</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="jacobi"/>
          <monitors/>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="with_diagnostics"/>
    </nonlinear_solver>
  </system>
  <system name="Divergence">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">ud</string_value>
    </ufl_symbol>
    <field name="Divergence">
      <ufl_symbol name="global">
        <string_value lines="1">d</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Solver">
      <type name="Picard">
        <preamble>
          <string_value lines="20" type="code" language="python">r = (radius*d_t*d_a - d_t*(radius*div(v_i)+v_i[0]))*dx</string_value>
        </preamble>
        <form name="Bilinear" rank="1">
          <string_value lines="20" type="code" language="python">a = lhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form name="Linear" rank="0">
          <string_value lines="20" type="code" language="python">L = rhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">L</string_value>
          </ufl_symbol>
        </form>
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">res = action(a, ud_i) - L</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">res</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-10</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="cg">
            <relative_error>
              <real_value rank="0">1.e-6</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">100</integer_value>
            </max_iterations>
            <nonzero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="sor"/>
          <monitors/>
        </linear_solver>
        <ignore_all_solver_failures/>
      </type>
      <solve name="with_diagnostics"/>
    </nonlinear_solver>
  </system>
  <system name="Viscosity">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">uvisc</string_value>
    </ufl_symbol>
    <field name="Viscosity">
      <ufl_symbol name="global">
        <string_value lines="1">visc</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P0">
            <family>
              <string_value>DG</string_value>
            </family>
            <degree>
              <integer_value rank="0">0</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
        <include_in_detectors/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Solver">
      <type name="Picard">
        <preamble>
          <string_value lines="20" type="code" language="python">r = (visc_t*visc_a - visc_t*mu)*dx</string_value>
        </preamble>
        <form name="Bilinear" rank="1">
          <string_value lines="20" type="code" language="python">a = lhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form name="Linear" rank="0">
          <string_value lines="20" type="code" language="python">L = rhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">L</string_value>
          </ufl_symbol>
        </form>
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">res = action(a, uvisc_i) - L</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">res</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-10</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="jacobi"/>
          <monitors/>
        </linear_solver>
        <ignore_all_solver_failures/>
      </type>
      <solve name="with_diagnostics"/>
    </nonlinear_solver>
  </system>
</terraferma_options>
