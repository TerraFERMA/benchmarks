<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">long</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">King benchmark.</string_value>
  </description>
  <simulations>
    <simulation name="King">
      <input_file>
        <string_value type="filename" lines="1">king.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">16</string_value>
          </values>
        </parameter>
        <parameter name="Ra">
          <values>
            <string_value lines="1">1.e4 1.e5 5.e5</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud

libspud.set_option("/system::Stokes/coefficient::RayleighNumber/type/rank/value/constant", float(Ra))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="Di">
          <values>
            <string_value lines="1">0.25 1.0 1.5</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud

libspud.set_option("/system::Stokes/coefficient::DissipationNumber/type/rank/value/constant", float(Di))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value type="filename" lines="1">../../src/transfinite_square.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="ncells">
              <update>
                <string_value type="code" language="python3" lines="20">from string import Template as template
input_file = template(input_file).safe_substitute({'ncells':ncells, 'factor':'0.01'})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="meshfiles">
              <python>
                <string_value type="code" language="python3" lines="20">meshfiles = ["transfinite_square"+ext for ext in [".xdmf", ".h5", "_facet_ids.xdmf", "_facet_ids.h5", "_cell_ids.xdmf", "_cell_ids.h5"]]</string_value>
              </python>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -2 transfinite_square.geo</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">tfgmsh2xdmf transfinite_square.msh</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="variables">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser
import os
from buckettools.threadlibspud import *
import numpy as np
from collections import OrderedDict

filename = os.path.split(input_filename)[-1]
threadlibspud.load_options(filename)
basename = libspud.get_option("/io/output_base_name")
threadlibspud.clear_options()

det = parser(basename+".det")
stat = parser(basename+".stat")

variables = OrderedDict()
variables["Nu_top"]  = -stat["Stokes"]["TemperatureTopSurfaceIntegral"]["functional_value"][-1]
variables["Nu_bot"]  = -stat["Stokes"]["TemperatureBottomSurfaceIntegral"]["functional_value"][-1]
variables["Vrms"]    = np.sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1])*float(Ra)
variables["Vtopmax"] = np.abs(det["Stokes"]["Velocity_0"]["Array"][:,-1]).max()*float(Ra)
variables["Vtopint"] = stat["Stokes"]["VelocityTopSurfaceIntegral"]["functional_value"][-1]*float(Ra)
variables["Tint"]    = stat["Stokes"]["TemperatureIntegral"]["functional_value"][-1]
variables["Phiint"]  = stat["ViscousDissipation"]["ViscousDissipationIntegral"]["functional_value"][-1]*float(Ra)
variables["Wint"]    = stat["WorkDone"]["WorkDoneIntegral"]["functional_value"][-1]*float(Ra)</string_value>
        </variable>
        <variable name="steady_state_attained">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser
import os
from buckettools.threadlibspud import *

filename = os.path.split(input_filename)[-1]
threadlibspud.load_options(filename)
basename = libspud.get_option("/io/output_base_name")
finishtime = libspud.get_option("/timestepping/finish_time")
steadytol = libspud.get_option("/timestepping/steady_state/tolerance")
threadlibspud.clear_options()

steady = parser(basename+".steady")

change = max(steady["Stokes"]["Velocity"]["change(linf)"][:,-1].max(), 
             steady["Stokes"]["Pressure"]["change(linf)"][-1],
             steady["Stokes"]["Temperature"]["change(linf)"][-1])
time = steady["ElapsedTime"]["value"][-1]

steady_state_attained = change &lt; steadytol and time &lt; finishtime</string_value>
        </variable>
        <variable name="errfile">
          <string_value type="code" language="python3" lines="20">import os
err = open("terraferma.err-0", 'r')

print(err.read())
err.seek(0)

linecount = -1
errfile = []
for line in err.readlines():
  if not line.startswith("WARNING:") and not line.startswith(os.linesep):
    if line.startswith("*** WARNING:"):
      linecount = 0
    elif linecount &gt;= 0:
      if line.startswith("-----------"):
        linecount += 1
      if linecount == 2:
        linecount = -1
    else:
      errfile.append(line)

err.close()</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="errors">
      <string_value type="code" language="python3" lines="20">import sys
import itertools
noerrors = True

params = list(errfile.parameters.keys())

for values in itertools.product(*errfile.parameters.values()):
  label = ", ".join(["{} = {}".format(params[i], v) for i,v in enumerate(values) if len(errfile.parameters[params[i]])&gt;1])
  key = {params[i]:v for i,v in enumerate(values)}
  if len(errfile[key]) &gt; 0:
    print("ERROR: unexpected output in terraferma.err-0 for ({})!".format(label))
    print(errfile[key])
    for line in errfile[key]:
      print(line)
      sys.stdout.write(line)
    noerrors = False

assert(noerrors)</string_value>
    </test>
    <test name="print">
      <string_value type="code" language="python3" lines="20">import itertools

params = list(variables.parameters.keys())

for values in itertools.product(*variables.parameters.values()):
  label = ", ".join(["{} = {}".format(params[i], v) for i,v in enumerate(values) if len(variables.parameters[params[i]])&gt;1])
  key = {params[i]:v for i,v in enumerate(values)}
  variable = variables[key]
  sstring = "{}\t"*len(variable.keys())
  vstring = "{:.4f}\t"*len(variable.keys())
  steady = "T" if steady_state_attained[key] else "F"
  print(label+":")
  print("  "+sstring.format(*[k for k in variable.keys()])+"steady?")
  print("  "+vstring.format(*[v for v in variable.values()])+steady)</string_value>
    </test>
  </tests>
</harness_options>
